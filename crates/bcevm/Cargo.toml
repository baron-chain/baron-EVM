[package]
name = "bcevm"
version = "1.0.0"
authors = ["BC"]
description = "bcevm - Baron Chain Ethereum Virtual Machine"
edition = "2021"
license = "MIT"
repository = "https://github.com/baron-chain/bc-evm"
readme = "../../README.md"
keywords = ["no_std", "ethereum", "evm", "bcevm"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[dependencies]
bcevm-interpreter = { path = "../interpreter", version = "4.0.0", default-features = false }
bcevm-precompile = { path = "../precompile", version = "6.0.0", default-features = false }
auto_impl = { version = "1.2", default-features = false }
cfg-if = "1.0"
dyn-clone = "1.0"
serde = { version = "1.0", default-features = false, features = ["derive", "rc"], optional = true }
serde_json = { version = "1.0", default-features = false, features = ["alloc"], optional = true }
tokio = { version = "1.37", features = ["rt-multi-thread", "macros"], optional = true }
ethers-providers = { version = "2.0", optional = true }
ethers-core = { version = "2.0", optional = true }
alloy-provider = { git = "https://github.com/alloy-rs/alloy.git", optional = true, default-features = false }
alloy-rpc-types = { git = "https://github.com/alloy-rs/alloy.git", optional = true, default-features = false }
alloy-transport = { git = "https://github.com/alloy-rs/alloy.git", optional = true, default-features = false }

[dev-dependencies]
alloy-sol-types = { version = "0.7.0", default-features = false, features = ["std"] }
ethers-contract = { version = "2.0.14", default-features = false }
anyhow = "1.0.82"
criterion = "0.5"
indicatif = "0.17"
reqwest = "0.12"
alloy-provider = { git = "https://github.com/alloy-rs/alloy.git", default-features = false, features = ["reqwest"] }
alloy-transport-http = { git = "https://github.com/alloy-rs/alloy.git" }

[features]
default = ["std", "c-kzg", "secp256k1", "portable"]
std = ["serde?/std", "serde_json?/std", "serde_json?/preserve_order", "bcevm-interpreter/std", "bcevm-precompile/std"]
hashbrown = ["bcevm-interpreter/hashbrown", "bcevm-precompile/hashbrown"]
serde = ["dep:serde", "bcevm-interpreter/serde"]
serde-json = ["serde", "dep:serde_json"]
arbitrary = ["bcevm-interpreter/arbitrary"]
asm-keccak = ["bcevm-interpreter/asm-keccak", "bcevm-precompile/asm-keccak"]
portable = ["bcevm-precompile/portable", "bcevm-interpreter/portable"]
test-utils = []
optimism = ["bcevm-interpreter/optimism", "bcevm-precompile/optimism"]
optimism-default-handler = ["optimism", "bcevm-precompile/optimism-default-handler", "bcevm-interpreter/optimism-default-handler"]
negate-optimism-default-handler = ["bcevm-precompile/negate-optimism-default-handler", "bcevm-interpreter/negate-optimism-default-handler"]
ethersdb = ["std", "tokio", "ethers-providers", "ethers-core"]
alloydb = ["std", "tokio", "alloy-provider", "alloy-rpc-types", "alloy-transport"]
dev = ["memory_limit", "optional_balance_check", "optional_block_gas_limit", "optional_eip3607", "optional_gas_refund", "optional_no_base_fee", "optional_beneficiary_reward"]
memory_limit = ["bcevm-interpreter/memory_limit"]
optional_balance_check = ["bcevm-interpreter/optional_balance_check"]
optional_block_gas_limit = ["bcevm-interpreter/optional_block_gas_limit"]
optional_eip3607 = ["bcevm-interpreter/optional_eip3607"]
optional_gas_refund = ["bcevm-interpreter/optional_gas_refund"]
optional_no_base_fee = ["bcevm-interpreter/optional_no_base_fee"]
optional_beneficiary_reward = ["bcevm-interpreter/optional_beneficiary_reward"]
secp256k1 = ["bcevm-precompile/secp256k1"]
c-kzg = ["bcevm-precompile/c-kzg"]

[[example]]
name = "fork_ref_transact"
path = "../../examples/fork_ref_transact.rs"
required-features = ["ethersdb"]

[[example]]
name = "generate_block_traces"
path = "../../examples/generate_block_traces.rs"
required-features = ["std", "serde-json", "ethersdb"]

[[example]]
name = "db_by_ref"
path = "../../examples/db_by_ref.rs"
required-features = ["std", "serde-json"]

[[example]]
name = "uniswap_v2_usdc_swap"
path = "../../examples/uniswap_v2_usdc_swap.rs"
required-features = ["alloydb"]

[[bench]]
name = "bench"
path = "benches/bench.rs"
harness = false
